# IntegridAI HackAI 2025 - Docker Compose Configuration
# Complete development environment setup

version: '3.8'

services:
  # Frontend Development Server
  frontend:
    build:
      context: .
      target: development
    container_name: integridai-frontend
    ports:
      - "3000:3000"
    volumes:
      - ./src/frontend:/app/src/frontend
      - ./public:/app/public
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - REACT_APP_API_URL=http://localhost:3001/api/mock
    command: npm run dev:frontend
    networks:
      - integridai-network
    depends_on:
      - mock-apis
    restart: unless-stopped

  # Mock APIs Server
  mock-apis:
    build:
      context: .
      target: development
    container_name: integridai-mock-apis
    ports:
      - "3001:3001"
    volumes:
      - ./api:/app/api
      - ./data:/app/data
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DATABASE_PATH=/app/data/integridai_hackathon.db
    command: npm run api:mock
    networks:
      - integridai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/mock/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend RegTech Engine (Python FastAPI)
  regtech-engine:
    build:
      context: ./src/backend/regtech
      dockerfile: Dockerfile
    container_name: integridai-regtech
    ports:
      - "8000:8000"
    volumes:
      - ./src/backend/regtech:/app
      - ./data:/app/data
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=sqlite:////app/data/integridai_hackathon.db
      - MOCK_EXTERNAL_APIS=true
      - LOG_LEVEL=debug
    networks:
      - integridai-network
    depends_on:
      - mock-apis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Training Engine (FLAISimulator)
  training-engine:
    build:
      context: ./src/backend/training
      dockerfile: Dockerfile
    container_name: integridai-training
    ports:
      - "8001:8001"
    volumes:
      - ./src/backend/training:/app
      - ./data:/app/data
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=sqlite:////app/data/integridai_hackathon.db
    networks:
      - integridai-network
    depends_on:
      - mock-apis
    restart: unless-stopped

  # Analytics Engine
  analytics-engine:
    build:
      context: ./src/backend/analytics
      dockerfile: Dockerfile
    container_name: integridai-analytics
    ports:
      - "8002:8002"
    volumes:
      - ./src/backend/analytics:/app
      - ./data:/app/data
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=sqlite:////app/data/integridai_hackathon.db
    networks:
      - integridai-network
    depends_on:
      - mock-apis
    restart: unless-stopped

  # Redis Cache (Optional - for development testing)
  redis:
    image: redis:7-alpine
    container_name: integridai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - integridai-network
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # Nginx Reverse Proxy (Optional - for production-like testing)
  nginx:
    image: nginx:alpine
    container_name: integridai-nginx
    ports:
      - "80:80"
    volumes:
      - ./deployment/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - integridai-network
    depends_on:
      - frontend
      - mock-apis
      - regtech-engine
    restart: unless-stopped
    profiles:
      - production

# Networks
networks:
  integridai-network:
    driver: bridge

# Volumes
volumes:
  redis_data:
  postgres_data:
  app_data: